generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Organization {
  id         String       @unique @default(uuid())
  name       String?
  team       Json?
  goals      Json?
  Employee   Employee[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Department Department[]
}

model Manager {
  id           String     @unique @default(uuid())
  name         String
  password     String
  auth         Json?
  email        String     @unique
  departmentId String
  Department   Department @relation(fields: [departmentId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Employee {
  id                         String               @unique @default(uuid())
  name                       String
  email                      String               @unique
  password                   String
  age                        Int
  goals                      Json
  Organization               Organization         @relation(fields: [orgId], references: [id])
  role                       Roles                @relation(fields: [roleId], references: [id])
  completedAssesments        Json?
  isLatestAssesmentCompleted Boolean?
  roleId                     String
  points                     Int?                 @default(0)
  leaderboardRank            Int?
  currentBadgeId             String?
  availedBadges              Json?
  orgId                      String
  createdAt                  DateTime             @default(now())
  updatedAt                  DateTime             @updatedAt
  employeeId                 String?
  badgeId                    String?
  // Away from keyboard (Cannot do tasks cz of any personal or anything)
  isAfk                      Boolean?
  departmentId               String?
  Department                 Department?          @relation(fields: [departmentId], references: [id])
  PerformanceMetrics         PerformanceMetrics[]
}

model Roles {
  id             String       @unique @default(uuid())
  name           String
  requiredSkills Json
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Employee       Employee[]
  Assesments     Assesments[]
}

model Badge {
  id        String   @unique @default(uuid())
  minPoints Int
  name      String
  minRank   Int?
  maxPoints Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id             String       @unique @default(uuid())
  name           String?
  Employee       Employee[]
  Organization   Organization @relation(fields: [orgId], references: [id])
  orgId          String
  requiredSkills Json
  Manager        Manager[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Assesments {
  id                String   @unique @default(uuid())
  name              String?
  roleId            String
  Role              Roles    @relation(fields: [roleId], references: [id])
  totalPoints       Int?
  pointsPerQuestion Int?
  isManuallyAdded   Boolean
  aiPrompt          String?
  aiReponse         String?
  questions         Json?
  isApproved        Boolean?
  expireAt          DateTime
  isExpired         Boolean?
  isActive          Boolean  @default(true)
  data              Json
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model PerformanceMetrics {
  id         String   @unique @default(uuid())
  employeeId String
  Employee   Employee @relation(fields: [employeeId], references: [id])
  metrics    Json // Productivity metrics data
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
