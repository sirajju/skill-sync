generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String       @unique @default(uuid())
  name        String?      @unique
  team        Json?
  goals       Json?
  Employee    Employee[]
  webhookData Json?
  createdAt   DateTime     @default(now())
  cloudId     String?      @unique
  updatedAt   DateTime     @updatedAt
  Department  Department[]
}

model Manager {
  id           String     @unique @default(uuid())
  name         String
  password     String
  auth         Json?
  email        String     @unique
  departmentId String
  Department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Employee {
  id                         String               @unique @default(uuid())
  name                       String
  email                      String               @unique
  password                   String?
  auth                       Json?
  cloudId                    String?              @unique
  age                        Int?
  goals                      Json?
  Organization               Organization?        @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role                       Roles?               @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  completedAssesments        Json?
  isLatestAssesmentCompleted Boolean?
  roleId                     String?
  points                     Int?                 @default(0)
  leaderboardRank            Int?
  currentBadgeId             String?
  availedBadges              Json?
  orgId                      String
  createdAt                  DateTime             @default(now())
  updatedAt                  DateTime             @updatedAt
  employeeId                 String?
  badgeId                    String?
  // Away from keyboard (Cannot do tasks cz of any personal or anything)
  isAfk                      Boolean?
  departmentId               String?
  Department                 Department?          @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  PerformanceMetrics         PerformanceMetrics[]
  Tasks                      Tasks[]
}

model Roles {
  id             String       @unique @default(uuid())
  name           String
  requiredSkills Json
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Employee       Employee[]
  Assesments     Assesments[]
}

model Badge {
  id        String   @unique @default(uuid())
  minPoints Int
  name      String
  imageUrl  String
  minRank   Int?
  maxPoints Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id             String       @unique @default(uuid())
  name           String?
  Employee       Employee[]
  Organization   Organization @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgId          String
  requiredSkills Json
  Manager        Manager[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Assesments {
  id                String    @unique @default(uuid())
  name              String?
  roleId            String
  Role              Roles     @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  totalPoints       Int?
  pointsPerQuestion Int?
  isManuallyAdded   Boolean
  aiPrompt          String?   @db.VarChar(3000)
  aiResponse        String?   @db.VarChar(5000)
  aiJsonResponse    Json?
  questions         Json?
  isApproved        Boolean?
  expireAt          DateTime?
  isExpired         Boolean?
  isActive          Boolean   @default(true)
  data              Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model PerformanceMetrics {
  id         String   @unique @default(uuid())
  employeeId String
  Employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  metrics    Json // Productivity metrics data
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Projects {
  id             String   @unique @default(uuid())
  key            String
  name           String
  projectTypeKey String?
  cloudId        String?  @unique
  description    String?
  leadId         String?
  leadName       String?
  orgId          String?
  issueTypes     Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Tasks          Tasks[]
}

model Tasks {
  id               String    @unique @default(uuid())
  title            String
  description      String
  cloudId          String?   @unique
  complexity       Float?
  projectId        String
  Project          Projects  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  webhookData      Json?
  aiResponse       String?   @db.VarChar(500)
  aiJsonResponse   Json?
  priority         Priority?
  minMinutes       Int
  minMinutesString String?
  maxMinutes       Int?
  maxMinutesString String?
  isAssigned       Boolean?  @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  Employee         Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeId       String?
}

model Token {
  id           String   @unique @default(uuid())
  access_token String   @db.VarChar(2500)
  cloudId      String?  @unique
  refreshToken String?  @db.VarChar(2500)
  scope        String?  @db.VarChar(2500)
  expires_in   Int?
  expires_at   DateTime
  type         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum Priority {
  LOWEST
  LOW
  MEDIUM
  HIGH
  HIGHEST
}
